@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
@await Component.InvokeAsync("_DefaultHeadPartials")
<body>
    @await Component.InvokeAsync("_DefaultHeaderPartials")
    <main>
        <section class="cart-section container">
            <h2>Sepetim</h2>
            <div id="cart-items-container" class="cart-items">
                </div>
            <div id="cart-summary" class="cart-summary">
                <div>
                    <span>Kitapların Toplam Fiyatı:</span>
                    <span id="books-subtotal-price">₺0.00</span>
                </div>
                <div>
                    <span>KDV (%18):</span>
                    <span id="vat-amount">₺0.00</span>
                </div>
                <div>
                    <span>Kargo Ücreti:</span>
                    <span id="shipping-fee">₺0.00</span>
                </div>
                <div class="total-price-final">
                    <span>Genel Toplam:</span>
                    <span id="final-total-price">₺0.00</span>
                </div>
            </div>
            <a href="#" id="checkout-button" class="checkout-btn" style="display: none;">Siparişi Tamamla</a>
            <p id="empty-cart-message" class="empty-cart-message">Sepetinizde henüz ürün bulunmamaktadır. Hadi kitapları keşfedin!</p>
        </section>
    </main>

    @await Component.InvokeAsync("_DefaultFooterPartials")

    <script>
        let cart = JSON.parse(localStorage.getItem('kitapDunyasiCart')) || [];
        const cartItemCountSpan = document.getElementById('cart-item-count');
        const cartItemsContainer = document.getElementById('cart-items-container');
        const cartSummary = document.getElementById('cart-summary');
        const booksSubtotalPriceSpan = document.getElementById('books-subtotal-price');
        const vatAmountSpan = document.getElementById('vat-amount');
        const shippingFeeSpan = document.getElementById('shipping-fee');
        const finalTotalPriceSpan = document.getElementById('final-total-price');
        const checkoutButton = document.getElementById('checkout-button');
        const emptyCartMessage = document.getElementById('empty-cart-message');

        const VAT_RATE = 0.18; // %18 KDV
        const SHIPPING_FEE = 15.00; // Sabit kargo ücreti

        function updateCartCount() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            if (cartItemCountSpan) {
                cartItemCountSpan.textContent = totalItems;
                if (totalItems > 0) {
                    // Add a slight bounce animation when count updates
                    cartItemCountSpan.classList.add('bounce');
                    setTimeout(() => {
                        cartItemCountSpan.classList.remove('bounce');
                    }, 500);
                }
            }
        }

        function saveCart() {
            localStorage.setItem('kitapDunyasiCart', JSON.stringify(cart));
            updateCartCount();
            if (cartItemsContainer) { // Only render on cart.html
                renderCartItems();
            }
        }

        function addToCart(book) { // This function would ideally be called from index.html
            const existingBook = cart.find(item => item.id === book.id);
            if (existingBook) {
                existingBook.quantity++;
            } else {
                cart.push({ ...book, quantity: 1 }); // Ensure quantity is initialized
            }
            saveCart();
        }

        function renderCartItems() {
            cartItemsContainer.innerHTML = '';
            let booksSubtotal = 0;

            if (cart.length === 0) {
                emptyCartMessage.style.display = 'block';
                cartSummary.style.display = 'none';
                checkoutButton.style.display = 'none';
                return;
            } else {
                emptyCartMessage.style.display = 'none';
                cartSummary.style.display = 'block';
                checkoutButton.style.display = 'block';
            }

            cart.forEach(item => {
                const itemTotal = item.price * item.quantity;
                booksSubtotal += itemTotal;

                const cartItemDiv = document.createElement('div');
                cartItemDiv.classList.add('cart-item');
                cartItemDiv.dataset.bookId = item.id;

                cartItemDiv.innerHTML = `
                    <div class="cart-item-image">${item.name.substring(0, 10) + (item.name.length > 10 ? '...' : '')}</div>
                    <div class="cart-item-details">
                        <div class="cart-item-title">${item.name}</div>
                        <div class="cart-item-price">₺${item.price.toFixed(2)}</div>
                    </div>
                    <div class="cart-item-quantity">
                        <button data-action="decrease">-</button>
                        <span>${item.quantity}</span>
                        <button data-action="increase">+</button>
                    </div>
                    <button class="remove-item-btn" data-action="remove">Sil</button>
                `;
                cartItemsContainer.appendChild(cartItemDiv);
            });

            // Calculate and display totals
            const vatAmount = booksSubtotal * VAT_RATE;
            const finalTotal = booksSubtotal + vatAmount + SHIPPING_FEE;

            booksSubtotalPriceSpan.textContent = `₺${booksSubtotal.toFixed(2)}`;
            vatAmountSpan.textContent = `₺${vatAmount.toFixed(2)}`;
            shippingFeeSpan.textContent = `₺${SHIPPING_FEE.toFixed(2)}`;
            finalTotalPriceSpan.textContent = `₺${finalTotal.toFixed(2)}`;
        }

        function handleCartActions(event) {
            const target = event.target;
            const bookId = target.closest('.cart-item')?.dataset.bookId;
            if (!bookId) return;

            const existingBookIndex = cart.findIndex(item => item.id === bookId);
            if (existingBookIndex === -1) return;

            if (target.dataset.action === 'increase') {
                cart[existingBookIndex].quantity++;
            } else if (target.dataset.action === 'decrease') {
                if (cart[existingBookIndex].quantity > 1) {
                    cart[existingBookIndex].quantity--;
                } else {
                    cart.splice(existingBookIndex, 1);
                }
            } else if (target.dataset.action === 'remove') {
                cart.splice(existingBookIndex, 1);
            }

            saveCart();
        }

        if (cartItemsContainer) {
            cartItemsContainer.addEventListener('click', handleCartActions);
        }

        if (checkoutButton) {
            checkoutButton.addEventListener('click', (e) => {
                e.preventDefault();
                if (cart.length > 0) {
                    alert("Siparişiniz başarıyla alındı! Teşekkür ederiz.");
                    cart = [];
                    saveCart();
                } else {
                    alert("Sepetiniz boş. Lütfen önce ürün ekleyin.");
                }
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            updateCartCount();
            if (cartItemsContainer) {
                renderCartItems();
            }
        });
    </script>
</body>
</html>