
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="tr">
@await Component.InvokeAsync("_DefaultHeadPartials")
<body>
    @await Component.InvokeAsync("_DefaultHeaderPartials")

    <main>
        <section class="hero-section">
            <h1 class="hero-title">Kitap Dünyasına Hoş Geldiniz</h1>
            <p class="hero-subtitle">Binlerce kitap arasından favorilerinizi keşfedin</p>
        </section>

        <div class="search-container">
            <div class="search-bar">
                <input type="text" id="search-input" placeholder="Kitap veya yazar ara...">
                <button class="search-btn" id="search-btn">
                    <i class="fas fa-search"></i> Ara
                </button>
            </div>
        </div>

        <div class="content-layout">
            <aside class="sidebar">
                <h3>Kategoriler</h3>
                <ul class="category-list">
                    <li><button class="category-btn active" data-category="all">Tüm Kitaplar</button></li>
                    <li><button class="category-btn" data-category="roman">Roman</button></li>
                    <li><button class="category-btn" data-category="bilim">Bilim</button></li>
                    <li><button class="category-btn" data-category="sanat">Sanat</button></li>
                    <li><button class="category-btn" data-category="is-kariyer">İş & Kariyer</button></li>
                    <li><button class="category-btn" data-category="tarih">Tarih</button></li>
                    <li><button class="category-btn" data-category="cocuk">Çocuk Kitapları</button></li>
                    <li><button class="category-btn" data-category="kisisel-gelisim">Kişisel Gelişim</button></li>
                    <li><button class="category-btn" data-category="fantastik">Fantastik</button></li>
                </ul>
            </aside>

            <section class="books-section">
                <div class="books-grid" id="books-grid">
                    <!-- Books will be rendered here -->
                </div>
                <div class="no-results" id="no-results" style="display: none;">
                    <i class="fas fa-search"></i>
                    <h3>Aradığınız kriterlere uygun kitap bulunamadı</h3>
                    <p>Farklı anahtar kelimeler veya kategoriler deneyebilirsiniz.</p>
                </div>
            </section>
        </div>
    </main>
    @await Component.InvokeAsync("_DefaultFooterPartials")
    <script>
        // Book data
        const books = [
            { id: '1', title: 'Suç ve Ceza', author: 'Fyodor Dostoyevski', price: 35.99, category: 'roman' },
            { id: '2', title: '1984', author: 'George Orwell', price: 29.99, category: 'roman' },
            { id: '3', title: 'Simyacı', author: 'Paulo Coelho', price: 24.99, category: 'roman' },
            { id: '4', title: 'Sapiens', author: 'Yuval Noah Harari', price: 42.99, category: 'bilim' },
            { id: '5', title: 'Kürk Mantolu Madonna', author: 'Sabahattin Ali', price: 19.99, category: 'roman' },
            { id: '6', title: 'İnsan Nasıl Yaşar', author: 'Lev Tolstoy', price: 27.99, category: 'kisisel-gelisim' },
            { id: '7', title: 'Evrenin Kısa Tarihi', author: 'Stephen Hawking', price: 39.50, category: 'bilim' },
            { id: '8', title: 'Sanatın Öyküsü', author: 'E. H. Gombrich', price: 55.00, category: 'sanat' },
            { id: '9', title: 'Etkili İnsanların 7 Alışkanlığı', author: 'Stephen Covey', price: 32.00, category: 'is-kariyer' },
            { id: '10', title: 'Nutuk', author: 'Mustafa Kemal Atatürk', price: 45.00, category: 'tarih' },
            { id: '11', title: 'Küçük Prens', author: 'Antoine de Saint-Exupéry', price: 18.50, category: 'cocuk' },
            { id: '12', title: 'Hobbit', author: 'J.R.R. Tolkien', price: 30.00, category: 'fantastik' },
            { id: '13', title: 'Psikolojinin Temelleri', author: 'Carole Wade', price: 60.00, category: 'bilim' },
            { id: '14', title: 'Sıfırıncı Gün', author: 'Sabahattin Zaim', price: 22.00, category: 'is-kariyer' },
            { id: '15', title: 'Dönüşüm', author: 'Franz Kafka', price: 15.00, category: 'roman' }
        ];

        // Cart management
        let cart = [];
        let currentCategory = 'all';
        let currentSearch = '';

        // DOM elements
        const booksGrid = document.getElementById('books-grid');
        const noResults = document.getElementById('no-results');
        const searchInput = document.getElementById('search-input');
        const searchBtn = document.getElementById('search-btn');
        const cartCount = document.getElementById('cart-count');
        const categoryBtns = document.querySelectorAll('.category-btn');

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            renderBooks(books);
            updateCartCount();
            attachEventListeners();
        });

        function attachEventListeners() {
            // Category buttons
            categoryBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    categoryBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentCategory = btn.dataset.category;
                    filterBooks();
                });
            });

            // Search
            searchBtn.addEventListener('click', performSearch);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') performSearch();
            });

            // Cart
            document.getElementById('cart-container').addEventListener('click', () => {
                alert(`Sepetinizde ${cart.length} ürün var.`);
            });
        }

        function performSearch() {
            currentSearch = searchInput.value.trim().toLowerCase();
            filterBooks();
        }

        function filterBooks() {
            let filtered = books;

            // Category filter
            if (currentCategory !== 'all') {
                filtered = filtered.filter(book => book.category === currentCategory);
            }

            // Search filter
            if (currentSearch) {
                filtered = filtered.filter(book =>
                    book.title.toLowerCase().includes(currentSearch) ||
                    book.author.toLowerCase().includes(currentSearch)
                );
            }

            renderBooks(filtered);
        }

        function renderBooks(booksToRender) {
            if (booksToRender.length === 0) {
                booksGrid.style.display = 'none';
                noResults.style.display = 'block';
                return;
            }

            booksGrid.style.display = 'grid';
            noResults.style.display = 'none';

            booksGrid.innerHTML = booksToRender.map(book => `
                        <div class="book-card" data-book-id="${book.id}">
                            <div class="book-image">
                                ${book.title}
                            </div>
                            <div class="book-content">
                                <h3 class="book-title">${book.title}</h3>
                                <p class="book-author">${book.author}</p>
                                <div class="book-price">₺${book.price.toFixed(2)}</div>
                                <div class="book-actions">
                                    <button class="btn btn-primary" onclick="addToCart('${book.id}')">
                                        <i class="fas fa-shopping-cart"></i> Sepete Ekle
                                    </button>
                                    <button class="btn btn-secondary" onclick="readBook('${book.title}')">
                                        <i class="fas fa-book-open"></i> Oku
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('');

            // Animate cards
            const cards = document.querySelectorAll('.book-card');
            cards.forEach((card, index) => {
                card.style.animation = `slideInUp 0.6s ease ${index * 0.1}s both`;
            });
        }

        function addToCart(bookId) {
            const bookToAdd = books.find(book => book.id === bookId);
            if (bookToAdd) {
                cart.push(bookToAdd);
                updateCartCount();
                alert(`${bookToAdd.title} sepete eklendi!`);
            }
        }

        function updateCartCount() {
            cartCount.textContent = cart.length;
            if (cart.length > 0) {
                cartCount.classList.add('bounce');
                setTimeout(() => {
                    cartCount.classList.remove('bounce');
                }, 500);
            }
        }

        function readBook(bookTitle) {
            alert(`${bookTitle} şimdi okunuyor... (Bu bir demo özelliğidir)`);
        }
    </script>
</body>
</html>
